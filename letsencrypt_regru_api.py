#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ Let's Encrypt
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DNS-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API reg.ru

–ê–≤—Ç–æ—Ä: –§–æ—Ñ–∞–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π
–î–∞—Ç–∞: 27.10.2025

–û–ø–∏—Å–∞–Ω–∏–µ:
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    Let's Encrypt –¥–ª—è –¥–æ–º–µ–Ω–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ reg.ru, –∏—Å–ø–æ–ª—å–∑—É—è DNS-01 challenge.
    –°–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API reg.ru –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å—è–º–∏.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - Python 3.6+
    - requests
    - certbot
    - cryptography

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    pip install requests certbot cryptography
"""

import os
import sys
import json
import time
import logging
import argparse
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

try:
    import requests
except ImportError:
    print("–û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å 'requests'")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install requests")
    sys.exit(1)

try:
    from cryptography import x509
    from cryptography.x509.oid import NameOID, ExtensionOID
    from cryptography.hazmat.primitives import hashes, serialization
    from cryptography.hazmat.primitives.asymmetric import rsa
    from cryptography.hazmat.backends import default_backend
except ImportError:
    print("–û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å 'cryptography'")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install cryptography")
    sys.exit(1)

# ==============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API reg.ru
    "regru_username": "your_username",
    "regru_password": "your_password",
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–µ–Ω–∞
    "domain": "example.com",
    "wildcard": True,  # –°–æ–∑–¥–∞–≤–∞—Ç—å wildcard —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (*.domain.com)
    
    # Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Let's Encrypt
    "email": "admin@example.com",
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    "cert_dir": "/etc/letsencrypt/live",
    "log_file": "/var/log/letsencrypt_regru.log",
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DNS
    "dns_propagation_wait": 60,  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS (—Å–µ–∫—É–Ω–¥—ã)
    "dns_check_attempts": 10,     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS
    "dns_check_interval": 10,     # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ DNS (—Å–µ–∫—É–Ω–¥—ã)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    "renewal_days": 30,           # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx Proxy Manager
    "npm_enabled": False,         # –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å NPM
    "npm_host": "http://10.10.10.14:81",  # –ê–¥—Ä–µ—Å NPM
    "npm_email": "admin@example.com",       # Email –¥–ª—è –≤—Ö–æ–¥–∞ –≤ NPM
    "npm_password": "changeme",             # –ü–∞—Ä–æ–ª—å NPM
}

# API endpoints –¥–ª—è reg.ru
REGRU_API_URL = "https://api.reg.ru/api/regru2"

# ==============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ==============================================================================

def setup_logging(log_file: str, verbose: bool = False) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        verbose: –†–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        
    Returns:
        Logger –æ–±—ä–µ–∫—Ç
    """
    log_level = logging.DEBUG if verbose else logging.INFO
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%d.%m.%Y %H:%M:%S'
    )
    
    # –°–æ–∑–¥–∞–µ–º logger
    logger = logging.getLogger('LetsEncrypt_RegRU')
    logger.setLevel(log_level)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(log_level)
    file_handler.setFormatter(formatter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger


# ==============================================================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° API REG.RU
# ==============================================================================

class RegRuAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API reg.ru"""
    
    def __init__(self, username: str, password: str, logger: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è reg.ru
            password: –ü–∞—Ä–æ–ª—å reg.ru
            logger: Logger –æ–±—ä–µ–∫—Ç
        """
        self.username = username
        self.password = password
        self.logger = logger
        self.session = requests.Session()
    
    def _make_request(self, method: str, params: Dict) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API reg.ru
        
        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –û—Ç–≤–µ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ dict
        """
        url = f"{REGRU_API_URL}/{method}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        params.update({
            "username": self.username,
            "password": self.password,
            "output_format": "json"
        })
        
        try:
            self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {method}")
            response = self.session.post(url, data=params, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("result") == "success":
                self.logger.debug(f"–ó–∞–ø—Ä–æ—Å {method} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
            else:
                error_msg = result.get("error_text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                error_code = result.get("error_code", "unknown")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if "Access to API from this IP denied" in error_msg or error_code == "IP_DENIED":
                    self.logger.error("=" * 80)
                    self.logger.error("üö´ –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê –ö API REG.RU")
                    self.logger.error("=" * 80)
                    self.logger.error("‚ùå –î–æ—Å—Ç—É–ø –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞")
                    self.logger.error("")
                    self.logger.error("üîß –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
                    self.logger.error("1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç reg.ru")
                    self.logger.error("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' ‚Üí 'API'")
                    self.logger.error("3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
                    self.logger.error("4. –ò–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ IP (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)")
                    self.logger.error("")
                    self.logger.error("üåê –¢–µ–∫—É—â–∏–π IP –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π:")
                    self.logger.error("   curl -s https://ipinfo.io/ip")
                    self.logger.error("   –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ: https://whatismyipaddress.com/")
                    self.logger.error("")
                    self.logger.error("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: https://www.reg.ru/support/api")
                    self.logger.error("=" * 80)
                elif "Invalid username or password" in error_msg:
                    self.logger.error("=" * 80)
                    self.logger.error("üîê –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
                    self.logger.error("=" * 80)
                    self.logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    self.logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ password –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    self.logger.error("=" * 80)
                elif "IP exceeded allowed connection rate" in error_msg or error_code == "IP_EXCEEDED_ALLOWED_CONNECTION_RATE":
                    self.logger.error("=" * 80)
                    self.logger.error("‚è±Ô∏è  –û–®–ò–ë–ö–ê: –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –ó–ê–ü–†–û–°–û–í –ö API")
                    self.logger.error("=" * 80)
                    self.logger.error("‚ùå IP –∞–¥—Ä–µ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –¥–æ–ø—É—Å—Ç–∏–º—É—é —á–∞—Å—Ç–æ—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ API reg.ru")
                    self.logger.error("")
                    self.logger.error("üîß –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
                    self.logger.error("1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                    self.logger.error("2. –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ")
                    self.logger.error("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --test-api —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                    self.logger.error("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ systemd timer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)")
                    self.logger.error("")
                    self.logger.error("üìä –õ–ò–ú–ò–¢–´ API REG.RU:")
                    self.logger.error("   ‚Ä¢ –û–±—ã—á–Ω–æ: –Ω–µ –±–æ–ª–µ–µ 10-20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP")
                    self.logger.error("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ 1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å")
                    self.logger.error("")
                    self.logger.error("‚öôÔ∏è  –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:")
                    self.logger.error("   sudo systemctl enable letsencrypt-regru.timer")
                    self.logger.error("   sudo systemctl start letsencrypt-regru.timer")
                    self.logger.error("=" * 80)
                else:
                    self.logger.error(f"–û—à–∏–±–∫–∞ API reg.ru: {error_msg} (–∫–æ–¥: {error_code})")
                
                raise Exception(f"API Error: {error_msg}")
                
        except requests.exceptions.Timeout:
            self.logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API reg.ru (30 —Å–µ–∫)")
            raise
        except requests.exceptions.ConnectionError:
            self.logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API reg.ru. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            raise
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    def get_zone_records(self, domain: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π –¥–æ–º–µ–Ω–∞
        
        Args:
            domain: –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ DNS –∑–∞–ø–∏—Å–µ–π
        """
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limit)
        import time
        time.sleep(1)
        
        params = {
            "domain_name": domain,
        }
        
        result = self._make_request("zone/get_resource_records", params)
        
        if "answer" in result and "records" in result["answer"]:
            records = result["answer"]["records"]
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(records)} DNS –∑–∞–ø–∏—Å–µ–π")
            return records
        else:
            self.logger.warning("DNS –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
    
    def add_txt_record(self, domain: str, subdomain: str, txt_value: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏ –¥–ª—è DNS –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            subdomain: –ü–æ–¥–¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, _acme-challenge)
            txt_value: –ó–Ω–∞—á–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏: {subdomain}.{domain} = {txt_value}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limit)
        import time
        time.sleep(2)
        
        params = {
            "domain_name": domain,
            "subdomain": subdomain,
            "text": txt_value,
            "output_content_type": "plain"
        }
        
        try:
            self._make_request("zone/add_txt", params)
            self.logger.info("TXT –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å TXT –∑–∞–ø–∏—Å—å: {e}")
            return False
    
    def get_current_ip(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
        
        Returns:
            IP –∞–¥—Ä–µ—Å –∏–ª–∏ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        """
        try:
            response = requests.get("https://ipinfo.io/ip", timeout=10)
            if response.status_code == 200:
                return response.text.strip()
        except:
            try:
                response = requests.get("https://api.ipify.org", timeout=10)
                if response.status_code == 200:
                    return response.text.strip()
            except:
                pass
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def test_api_access(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API reg.ru
        
        Returns:
            True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP
        current_ip = self.get_current_ip()
        self.logger.info(f"–¢–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å: {current_ip}")
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API reg.ru...")
        
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limit)
            import time
            time.sleep(1)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            params = {}
            result = self._make_request("user/get_balance", params)
            
            if result and result.get("result") == "success":
                balance = result.get("answer", {}).get("prepay", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                self.logger.info(f"‚úÖ API reg.ru –¥–æ—Å—Ç—É–ø–µ–Ω. –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")
                return True
            else:
                self.logger.error("‚ùå API reg.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API reg.ru: {e}")
            return False
    
    def remove_txt_record(self, domain: str, subdomain: str, txt_value: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            subdomain: –ü–æ–¥–¥–æ–º–µ–Ω
            txt_value: –ó–Ω–∞—á–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏: {subdomain}.{domain}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            records = self.get_zone_records(domain)
            
            # –ò—â–µ–º –Ω—É–∂–Ω—É—é TXT –∑–∞–ø–∏—Å—å
            record_id = None
            for record in records:
                if (record.get("rectype") == "TXT" and 
                    record.get("subdomain") == subdomain and 
                    record.get("text") == txt_value):
                    record_id = record.get("id")
                    break
            
            if not record_id:
                self.logger.warning("TXT –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                return True
            
            params = {
                "domain_name": domain,
                "record_id": record_id
            }
            
            self._make_request("zone/remove_record", params)
            self.logger.info("TXT –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å TXT –∑–∞–ø–∏—Å—å: {e}")
            # –î–ª—è cleanup hook –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
            self.logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è")
            return True


# ==============================================================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° NGINX PROXY MANAGER
# ==============================================================================

class NginxProxyManagerAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Nginx Proxy Manager"""
    
    def __init__(self, host: str, email: str, password: str, logger: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ NPM
        
        Args:
            host: URL –∞–¥—Ä–µ—Å NPM (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://10.10.10.14:81)
            email: Email –¥–ª—è –≤—Ö–æ–¥–∞
            password: –ü–∞—Ä–æ–ª—å
            logger: Logger –æ–±—ä–µ–∫—Ç
        """
        self.host = host.rstrip('/')
        self.email = email
        self.password = password
        self.logger = logger
        self.session = requests.Session()
        self.token = None
    
    def login(self) -> bool:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Nginx Proxy Manager
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        url = f"{self.host}/api/tokens"
        
        payload = {
            "identity": self.email,
            "secret": self.password
        }
        
        try:
            self.logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Nginx Proxy Manager...")
            response = self.session.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            self.token = data.get("token")
            
            if self.token:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                self.logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ NPM —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.logger.error("–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ NPM: {e}")
            return False
    
    def get_certificates(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        """
        url = f"{self.host}/api/nginx/certificates"
        
        try:
            self.logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ NPM...")
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            certificates = response.json()
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(certificates)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
            return certificates
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
            return []
    
    def find_certificate_by_domain(self, domain: str) -> Optional[Dict]:
        """
        –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ –¥–æ–º–µ–Ω—É
        
        Args:
            domain: –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ None
        """
        certificates = self.get_certificates()
        
        for cert in certificates:
            domains = cert.get("domain_names", [])
            if domain in domains or f"*.{domain}" in domains:
                self.logger.debug(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {domain}")
                return cert
        
        return None
    
    def upload_certificate(self, domain: str, cert_path: str, key_path: str, 
                          chain_path: Optional[str] = None) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM
        
        –í–ê–ñ–ù–û: NPM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
        –ú—ã –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–æ—Ä–º—ã (multipart/form-data),
        –∞ –Ω–µ —á–µ—Ä–µ–∑ JSON API, —Ç–∞–∫ –∫–∞–∫ JSON endpoint –∏–º–µ–µ—Ç —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã.
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            cert_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            key_path: –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
            chain_path: –ü—É—Ç—å –∫ —Ü–µ–ø–æ—á–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ None
        """
        url = f"{self.host}/api/nginx/certificates"
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            with open(cert_path, 'r') as f:
                certificate = f.read()
            
            with open(key_path, 'r') as f:
                certificate_key = f.read()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            intermediate_certificate = ""
            if chain_path and os.path.exists(chain_path):
                with open(chain_path, 'r') as f:
                    intermediate_certificate = f.read()
            
            # NPM Web UI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç multipart/form-data –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ custom —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            # –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É
            files = {
                'certificate': ('cert.pem', certificate, 'application/x-pem-file'),
                'certificate_key': ('privkey.pem', certificate_key, 'application/x-pem-file'),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if intermediate_certificate:
                files['intermediate_certificate'] = ('chain.pem', intermediate_certificate, 'application/x-pem-file')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            data = {
                'nice_name': domain,
                'provider': 'other',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: 'letsencrypt' –∏–ª–∏ 'other'
            }
            
            self.logger.debug(f"Uploading certificate as multipart/form-data")
            self.logger.debug(f"Files: {list(files.keys())}")
            self.logger.debug(f"Data: {data}")
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {domain} –≤ NPM...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ multipart/form-data
            response = self.session.post(url, files=files, data=data, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            cert_id = result.get("id")
            
            if cert_id:
                self.logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ NPM (ID: {cert_id})")
                return result
            else:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
                return None
                
        except FileNotFoundError as e:
            self.logger.error(f"–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return None
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM: {e}")
            if hasattr(e.response, 'text'):
                self.logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None
    
    def update_certificate(self, cert_id: int, cert_path: str, key_path: str,
                          chain_path: Optional[str] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Args:
            cert_id: ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM
            cert_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            key_path: –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
            chain_path: –ü—É—Ç—å –∫ —Ü–µ–ø–æ—á–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        url = f"{self.host}/api/nginx/certificates/{cert_id}"
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            with open(cert_path, 'r') as f:
                certificate = f.read()
            
            with open(key_path, 'r') as f:
                certificate_key = f.read()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            intermediate_certificate = ""
            if chain_path and os.path.exists(chain_path):
                with open(chain_path, 'r') as f:
                    intermediate_certificate = f.read()
            
            # NPM Web UI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç multipart/form-data –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            files = {
                'certificate': ('cert.pem', certificate, 'application/x-pem-file'),
                'certificate_key': ('privkey.pem', certificate_key, 'application/x-pem-file'),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if intermediate_certificate:
                files['intermediate_certificate'] = ('chain.pem', intermediate_certificate, 'application/x-pem-file')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            data = {
                'provider': 'other',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            }
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ID {cert_id} –≤ NPM...")
            response = self.session.put(url, files=files, data=data, timeout=30)
            response.raise_for_status()
            
            self.logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ NPM")
            return True
            
        except FileNotFoundError as e:
            self.logger.error(f"–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return False
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM: {e}")
            if hasattr(e.response, 'text'):
                self.logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return False
    
    def sync_certificate(self, domain: str, cert_dir: str) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å NPM (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        
        Args:
            domain: –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            cert_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ Let's Encrypt
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_path = os.path.join(cert_dir, "cert.pem")
        key_path = os.path.join(cert_dir, "privkey.pem")
        chain_path = os.path.join(cert_dir, "chain.pem")
        fullchain_path = os.path.join(cert_dir, "fullchain.pem")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(cert_path) or not os.path.exists(key_path):
            self.logger.error(f"–§–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {cert_dir}")
            return False
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ NPM
        if not self.login():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
        existing_cert = self.find_certificate_by_domain(domain)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fullchain –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ cert + chain
        if os.path.exists(fullchain_path):
            final_cert_path = fullchain_path
            final_chain_path = None
        else:
            final_cert_path = cert_path
            final_chain_path = chain_path if os.path.exists(chain_path) else None
        
        if existing_cert:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            cert_id = existing_cert.get("id")
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (ID: {cert_id})")
            return self.update_certificate(cert_id, final_cert_path, key_path, final_chain_path)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM")
            result = self.upload_certificate(domain, final_cert_path, key_path, final_chain_path)
            return result is not None


# ==============================================================================
# –ö–õ–ê–°–° –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–°–¢–û–í–´–• –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í
# ==============================================================================

class TestCertificateGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    
    def __init__(self, logger: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        
        Args:
            logger: Logger –æ–±—ä–µ–∫—Ç
        """
        self.logger = logger
    
    def generate_self_signed_certificate(
        self,
        domain: str,
        wildcard: bool = False,
        output_dir: str = "/etc/letsencrypt/live",
        validity_days: int = 90
    ) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            wildcard: –°–æ–∑–¥–∞—Ç—å wildcard —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            validity_days: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90)
            
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            self.logger.info("=" * 80)
            self.logger.info("–ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–û–ì–û –°–ê–ú–û–ü–û–î–ü–ò–°–ê–ù–ù–û–ì–û –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê")
            self.logger.info("=" * 80)
            self.logger.info(f"–î–æ–º–µ–Ω: {domain}")
            self.logger.info(f"Wildcard: {wildcard}")
            self.logger.info(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {validity_days} –¥–Ω–µ–π")
            self.logger.info("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –Ω–µ –¥–ª—è production!")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            cert_dir = os.path.join(output_dir, domain)
            os.makedirs(cert_dir, exist_ok=True)
            self.logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {cert_dir}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            self.logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ RSA 2048 –±–∏—Ç...")
            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=2048,
                backend=default_backend()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            key_path = os.path.join(cert_dir, "privkey.pem")
            with open(key_path, "wb") as f:
                f.write(private_key.private_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PrivateFormat.TraditionalOpenSSL,
                    encryption_algorithm=serialization.NoEncryption()
                ))
            os.chmod(key_path, 0o600)
            self.logger.info(f"‚úì –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {key_path}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            subject = issuer = x509.Name([
                x509.NameAttribute(NameOID.COUNTRY_NAME, "RU"),
                x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "Moscow"),
                x509.NameAttribute(NameOID.LOCALITY_NAME, "Moscow"),
                x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Test Certificate"),
                x509.NameAttribute(NameOID.COMMON_NAME, domain),
            ])
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω (SAN)
            san_list = [x509.DNSName(domain)]
            if wildcard:
                san_list.append(x509.DNSName(f"*.{domain}"))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            self.logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
            cert = (
                x509.CertificateBuilder()
                .subject_name(subject)
                .issuer_name(issuer)
                .public_key(private_key.public_key())
                .serial_number(x509.random_serial_number())
                .not_valid_before(datetime.utcnow())
                .not_valid_after(datetime.utcnow() + timedelta(days=validity_days))
                .add_extension(
                    x509.SubjectAlternativeName(san_list),
                    critical=False,
                )
                .add_extension(
                    x509.BasicConstraints(ca=False, path_length=None),
                    critical=True,
                )
                .add_extension(
                    x509.KeyUsage(
                        digital_signature=True,
                        key_encipherment=True,
                        content_commitment=False,
                        data_encipherment=False,
                        key_agreement=False,
                        key_cert_sign=False,
                        crl_sign=False,
                        encipher_only=False,
                        decipher_only=False,
                    ),
                    critical=True,
                )
                .add_extension(
                    x509.ExtendedKeyUsage([
                        x509.oid.ExtendedKeyUsageOID.SERVER_AUTH,
                        x509.oid.ExtendedKeyUsageOID.CLIENT_AUTH,
                    ]),
                    critical=False,
                )
                .sign(private_key, hashes.SHA256(), default_backend())
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            cert_path = os.path.join(cert_dir, "cert.pem")
            with open(cert_path, "wb") as f:
                f.write(cert.public_bytes(serialization.Encoding.PEM))
            self.logger.info(f"‚úì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cert_path}")
            
            # –°–æ–∑–¥–∞–µ–º fullchain (–¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—è cert)
            fullchain_path = os.path.join(cert_dir, "fullchain.pem")
            with open(fullchain_path, "wb") as f:
                f.write(cert.public_bytes(serialization.Encoding.PEM))
            self.logger.info(f"‚úì Fullchain —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {fullchain_path}")
            
            # –°–æ–∑–¥–∞–µ–º chain.pem (–ø—É—Å—Ç–æ–π –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ)
            chain_path = os.path.join(cert_dir, "chain.pem")
            with open(chain_path, "w") as f:
                f.write("")
            self.logger.info(f"‚úì Chain —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {chain_path}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
            self.logger.info("")
            self.logger.info("=" * 80)
            self.logger.info("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–¢–ò–§–ò–ö–ê–¢–ï")
            self.logger.info("=" * 80)
            self.logger.info(f"–î–æ–º–µ–Ω: {domain}")
            if wildcard:
                self.logger.info(f"Wildcard: *.{domain}")
            self.logger.info(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å: {cert.not_valid_before}")
            self.logger.info(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {cert.not_valid_after}")
            self.logger.info(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {cert.serial_number}")
            self.logger.info("")
            self.logger.info("üìÅ –§–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:")
            self.logger.info(f"  ‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {key_path}")
            self.logger.info(f"  ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_path}")
            self.logger.info(f"  ‚Ä¢ Fullchain: {fullchain_path}")
            self.logger.info(f"  ‚Ä¢ Chain: {chain_path}")
            self.logger.info("")
            self.logger.info("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
            self.logger.info("  –≠—Ç–æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!")
            self.logger.info("  –ë—Ä–∞—É–∑–µ—Ä—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
            self.logger.info("  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
            self.logger.info("  –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã.")
            self.logger.info("=" * 80)
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return False


# ==============================================================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° CERTBOT
# ==============================================================================

class LetsEncryptManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ Let's Encrypt"""
    
    def __init__(self, config: Dict, api: RegRuAPI, logger: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            api: API –∫–ª–∏–µ–Ω—Ç reg.ru
            logger: Logger –æ–±—ä–µ–∫—Ç
        """
        self.config = config
        self.api = api
        self.logger = logger
        self.domain = config["domain"]
        self.email = config["email"]
        self.cert_dir = os.path.join(config["cert_dir"], self.domain)
    
    def check_certbot_installed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ certbot
        
        Returns:
            True –µ—Å–ª–∏ certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            result = subprocess.run(
                ["certbot", "--version"],
                capture_output=True,
                text=True,
                check=True
            )
            self.logger.debug(f"Certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.logger.error("Certbot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
    
    def check_certificate_expiry(self) -> Optional[int]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        cert_file = os.path.join(self.cert_dir, "cert.pem")
        
        if not os.path.exists(cert_file):
            self.logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        try:
            from cryptography import x509
            from cryptography.hazmat.backends import default_backend
            
            with open(cert_file, "rb") as f:
                cert_data = f.read()
                cert = x509.load_pem_x509_certificate(cert_data, default_backend())
            
            expiry_date = cert.not_valid_after
            days_left = (expiry_date - datetime.now()).days
            
            self.logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date.strftime('%d.%m.%Y %H:%M:%S')}")
            self.logger.info(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            
            return days_left
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            return None
    
    def dns_challenge_hook(self, validation_domain: str, validation_token: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ DNS challenge - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
        
        Args:
            validation_domain: –î–æ–º–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, dfv24.com –∏–ª–∏ *.dfv24.com)
            validation_token: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("=== DNS Challenge: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏ ===")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –∏–∑ validation_domain
        # –£–±–∏—Ä–∞–µ–º wildcard –µ—Å–ª–∏ –µ—Å—Ç—å
        base_domain = validation_domain.replace("*.", "")
        
        # –î–ª—è DNS-01 challenge –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º _acme-challenge
        subdomain = "_acme-challenge"
        
        self.logger.info(f"–î–æ–º–µ–Ω: {base_domain}, –ü–æ–¥–¥–æ–º–µ–Ω: {subdomain}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º TXT –∑–∞–ø–∏—Å—å
        success = self.api.add_txt_record(base_domain, subdomain, validation_token)
        
        if success:
            # –ñ–¥–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS
            wait_time = self.config.get("dns_propagation_wait", 60)
            self.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS ({wait_time} —Å–µ–∫—É–Ω–¥)...")
            time.sleep(wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º base_domain –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            if self.verify_dns_record_external(base_domain, subdomain, validation_token):
                self.logger.info("DNS –≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
                return True
            else:
                self.logger.warning("DNS –∑–∞–ø–∏—Å—å –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                return True
        
        return False
    
    def dns_cleanup_hook(self, validation_domain: str, validation_token: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ DNS challenge - —É–¥–∞–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
        
        Args:
            validation_domain: –î–æ–º–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, dfv24.com –∏–ª–∏ *.dfv24.com)
            validation_token: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("=== DNS Challenge: –£–¥–∞–ª–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏ ===")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
        base_domain = validation_domain.replace("*.", "")
        subdomain = "_acme-challenge"
        
        self.logger.info(f"–î–æ–º–µ–Ω: {base_domain}, –ü–æ–¥–¥–æ–º–µ–Ω: {subdomain}")
        
        return self.api.remove_txt_record(base_domain, subdomain, validation_token)
    
    def verify_dns_record_external(self, domain: str, subdomain: str, expected_value: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è DNS –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π DNS
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            subdomain: –ü–æ–¥–¥–æ–º–µ–Ω
            expected_value: –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
        """
        import time
        
        full_domain = f"{subdomain}.{domain}"
        attempts = self.config.get("dns_check_attempts", 10)
        interval = self.config.get("dns_check_interval", 10)
        
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è {full_domain}")
        
        for attempt in range(attempts):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º nslookup –∏–ª–∏ dig —á–µ—Ä–µ–∑ subprocess
                result = subprocess.run(
                    ["nslookup", "-type=TXT", full_domain],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if expected_value in result.stdout:
                    self.logger.info(f"DNS –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    return True
                    
            except Exception as e:
                self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: DNS –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - {e}")
            
            if attempt < attempts - 1:
                time.sleep(interval)
        
        self.logger.warning("DNS –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def verify_dns_record(self, subdomain: str, expected_value: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è DNS –∑–∞–ø–∏—Å–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.domain)
        
        Args:
            subdomain: –ü–æ–¥–¥–æ–º–µ–Ω
            expected_value: –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TXT –∑–∞–ø–∏—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
        """
        return self.verify_dns_record_external(self.domain, subdomain, expected_value)
    
    def obtain_certificate(self) -> bool:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("=== –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ===")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
        domains = [self.domain]
        if self.config.get("wildcard", False):
            domains.append(f"*.{self.domain}")
        
        domain_args = []
        for d in domains:
            domain_args.extend(["-d", d])
        
        # –ö–æ–º–∞–Ω–¥–∞ certbot
        cmd = [
            "certbot", "certonly",
            "--manual",
            "--preferred-challenges", "dns",
            "--manual-auth-hook", f"{sys.executable} {os.path.abspath(__file__)} --auth-hook",
            "--manual-cleanup-hook", f"{sys.executable} {os.path.abspath(__file__)} --cleanup-hook",
            "--email", self.email,
            "--agree-tos",
            "--non-interactive",
            "--expand",
        ] + domain_args
        
        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            self.logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
            self.logger.debug(result.stdout)
            return True
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            self.logger.error(e.stderr)
            return False
    
    def renew_certificate(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ===")
        
        cmd = [
            "certbot", "renew",
            "--manual",
            "--manual-auth-hook", f"{sys.executable} {os.path.abspath(__file__)} --auth-hook",
            "--manual-cleanup-hook", f"{sys.executable} {os.path.abspath(__file__)} --cleanup-hook",
            "--non-interactive",
        ]
        
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.logger.debug(result.stdout)
            return True
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            self.logger.error(e.stderr)
            return False
    
    def display_certificate_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ"""
        cert_file = os.path.join(self.cert_dir, "cert.pem")
        
        if not os.path.exists(cert_file):
            self.logger.warning("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.logger.info("=" * 60)
        self.logger.info("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–¢–ò–§–ò–ö–ê–¢–ï")
        self.logger.info("=" * 60)
        
        try:
            result = subprocess.run(
                ["openssl", "x509", "-in", cert_file, "-text", "-noout"],
                capture_output=True,
                text=True,
                check=True
            )
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for line in result.stdout.split("\n"):
                if any(keyword in line for keyword in ["Subject:", "Issuer:", "Not Before", "Not After", "DNS:"]):
                    self.logger.info(line.strip())
            
            self.logger.info("=" * 60)
            self.logger.info("–ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê:")
            self.logger.info(f"  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {self.cert_dir}/cert.pem")
            self.logger.info(f"  –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {self.cert_dir}/privkey.pem")
            self.logger.info(f"  –¶–µ–ø–æ—á–∫–∞: {self.cert_dir}/chain.pem")
            self.logger.info(f"  –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞: {self.cert_dir}/fullchain.pem")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
    
    def sync_with_npm(self, npm_api: NginxProxyManagerAPI) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å Nginx Proxy Manager
        
        Args:
            npm_api: API –∫–ª–∏–µ–Ω—Ç NPM
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("=== –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å Nginx Proxy Manager ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        if not os.path.exists(self.cert_dir):
            self.logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.cert_dir}")
            return False
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        return npm_api.sync_certificate(self.domain, self.cert_dir)


# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================

def reload_webserver(logger: logging.Logger):
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    
    Args:
        logger: Logger –æ–±—ä–µ–∫—Ç
    """
    logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã
    services = ["nginx", "apache2", "httpd"]
    
    for service in services:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = subprocess.run(
                ["systemctl", "is-active", service],
                capture_output=True,
                text=True
            )
            
            if result.stdout.strip() == "active":
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
                subprocess.run(
                    ["systemctl", "reload", service],
                    check=True
                )
                logger.info(f"–°–µ—Ä–≤–∏—Å {service} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                return
                
        except Exception as e:
            logger.debug(f"–°–µ—Ä–≤–∏—Å {service} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
    
    logger.warning("–ê–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


def load_config(config_file: Optional[str] = None) -> Dict:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Args:
        config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (JSON)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    config = DEFAULT_CONFIG.copy()
    
    if config_file and os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                user_config = json.load(f)
                config.update(user_config)
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {config_file}: {e}")
            sys.exit(1)
    
    return config


def create_sample_config(output_file: str):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(DEFAULT_CONFIG, f, indent=4, ensure_ascii=False)
    
    print(f"–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {output_file}")
    print("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


# ==============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ==============================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ Let's Encrypt —á–µ—Ä–µ–∑ API reg.ru"
    )
    parser.add_argument(
        "-c", "--config",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (JSON)",
        default=None
    )
    parser.add_argument(
        "--create-config",
        help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        metavar="FILE"
    )
    parser.add_argument(
        "--obtain",
        help="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        action="store_true"
    )
    parser.add_argument(
        "--renew",
        help="–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        action="store_true"
    )
    parser.add_argument(
        "--check",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
        action="store_true"
    )
    parser.add_argument(
        "--auth-hook",
        help="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ö—É–∫ –¥–ª—è DNS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è certbot)",
        action="store_true"
    )
    parser.add_argument(
        "--cleanup-hook",
        help="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ö—É–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ DNS (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è certbot)",
        action="store_true"
    )
    parser.add_argument(
        "-v", "--verbose",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥",
        action="store_true"
    )
    parser.add_argument(
        "--auto",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
        action="store_true"
    )
    parser.add_argument(
        "--test-cert",
        help="–°–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)",
        action="store_true"
    )
    parser.add_argument(
        "--test-api",
        help="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API reg.ru",
        action="store_true"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.create_config:
        create_sample_config(args.create_config)
        return 0
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging(config["log_file"], args.verbose)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    if args.test_api:
        logger.info("=" * 80)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API REG.RU")
        logger.info("=" * 80)
        
        api = RegRuAPI(config["regru_username"], config["regru_password"], logger)
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if api.test_api_access():
            logger.info("")
            logger.info("=" * 80)
            logger.info("üß™ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´")
            logger.info("=" * 80)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–µ–π
            try:
                records = api.get_zone_records(config["domain"])
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π: —É—Å–ø–µ—à–Ω–æ ({len(records)} –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π: –æ—à–∏–±–∫–∞ - {e}")
            
            logger.info("")
            logger.info("=" * 80)
            logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
            logger.info("=" * 80)
            logger.info("API reg.ru –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return 0
        else:
            logger.error("=" * 80)
            logger.error("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            logger.error("=" * 80)
            logger.error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫—Ä–∏–ø—Ç–∞")
            return 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if args.test_cert:
        logger.info("=" * 80)
        logger.info("–†–ï–ñ–ò–ú: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
        logger.info("=" * 80)
        
        test_gen = TestCertificateGenerator(logger)
        success = test_gen.generate_self_signed_certificate(
            domain=config["domain"],
            wildcard=config.get("wildcard", False),
            output_dir=config["cert_dir"],
            validity_days=90
        )
        
        if success:
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ NPM
            if config.get("npm_enabled", False):
                logger.info("")
                logger.info("=" * 80)
                logger.info("–ó–ê–ì–†–£–ó–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê –í NGINX PROXY MANAGER")
                logger.info("=" * 80)
                
                npm_api = NginxProxyManagerAPI(
                    config["npm_host"],
                    config["npm_email"],
                    config["npm_password"],
                    logger
                )
                
                if npm_api.login():
                    cert_dir = os.path.join(config["cert_dir"], config["domain"])
                    cert_path = os.path.join(cert_dir, "fullchain.pem")
                    key_path = os.path.join(cert_dir, "privkey.pem")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                    existing = npm_api.find_certificate_by_domain(config["domain"])
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                        cert_id = existing.get("id")
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM (ID: {cert_id})")
                        if npm_api.update_certificate(cert_id, cert_path, key_path):
                            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ NPM")
                        else:
                            logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ NPM")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ NPM")
                        if npm_api.upload_certificate(config["domain"], cert_path, key_path):
                            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ NPM")
                        else:
                            logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ NPM")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Nginx Proxy Manager")
            
            logger.info("")
            logger.info("=" * 80)
            logger.info("‚úÖ –¢–ï–°–¢–û–í–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù")
            logger.info("=" * 80)
            return 0
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            return 1
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—É–∫–æ–≤ –¥–ª—è certbot
    if args.auth_hook:
        # Certbot –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–æ–º–µ–Ω –∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        domain = os.environ.get("CERTBOT_DOMAIN")
        token = os.environ.get("CERTBOT_VALIDATION")
        
        if domain and token:
            api = RegRuAPI(config["regru_username"], config["regru_password"], logger)
            manager = LetsEncryptManager(config, api, logger)
            success = manager.dns_challenge_hook(domain, token)
            return 0 if success else 1
        else:
            logger.error("CERTBOT_DOMAIN –∏–ª–∏ CERTBOT_VALIDATION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return 1
    
    if args.cleanup_hook:
        domain = os.environ.get("CERTBOT_DOMAIN")
        token = os.environ.get("CERTBOT_VALIDATION")
        
        if domain and token:
            api = RegRuAPI(config["regru_username"], config["regru_password"], logger)
            manager = LetsEncryptManager(config, api, logger)
            success = manager.dns_cleanup_hook(domain, token)
            return 0 if success else 1
        else:
            logger.error("CERTBOT_DOMAIN –∏–ª–∏ CERTBOT_VALIDATION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
    if os.geteuid() != 0:
        logger.error("–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root (sudo)")
        return 1
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    api = RegRuAPI(config["regru_username"], config["regru_password"], logger)
    manager = LetsEncryptManager(config, api, logger)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ certbot
    if not manager.check_certbot_installed():
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ certbot: apt-get install certbot")
        return 1
    
    logger.info("=" * 60)
    logger.info("–°–ö–†–ò–ü–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê–ú–ò LET'S ENCRYPT")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API reg.ru (–∫—Ä–æ–º–µ —Ä–µ–∂–∏–º–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if not args.check:
        if not api.test_api_access():
            logger.error("=" * 80)
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API reg.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            logger.error("=" * 80)
            logger.error("–°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ API")
            logger.error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ")
            return 1
        logger.info("")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    if args.check:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        days_left = manager.check_certificate_expiry()
        if days_left is None:
            logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.")
            return 2
        elif days_left < 30:
            logger.warning(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
            return 1
        else:
            logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ({days_left} –¥–Ω–µ–π)")
            return 0
    
    elif args.obtain:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        success = manager.obtain_certificate()
        if success:
            manager.display_certificate_info()
            reload_webserver(logger)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Nginx Proxy Manager
            if config.get("npm_enabled", False):
                npm_api = NginxProxyManagerAPI(
                    config["npm_host"],
                    config["npm_email"],
                    config["npm_password"],
                    logger
                )
                if manager.sync_with_npm(npm_api):
                    logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Nginx Proxy Manager")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å NPM")
            
            logger.info("–ù–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return 0
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            return 1
    
    elif args.renew:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        success = manager.renew_certificate()
        if success:
            manager.display_certificate_info()
            reload_webserver(logger)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Nginx Proxy Manager
            if config.get("npm_enabled", False):
                npm_api = NginxProxyManagerAPI(
                    config["npm_host"],
                    config["npm_email"],
                    config["npm_password"],
                    logger
                )
                if manager.sync_with_npm(npm_api):
                    logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Nginx Proxy Manager")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å NPM")
            
            logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return 0
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            return 1
    
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        logger.info("=" * 60)
        logger.info("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê")
        logger.info("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        renewal_days = config.get("renewal_days", 30)
        logger.info(f"–ü–æ—Ä–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {renewal_days} –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        days_left = manager.check_certificate_expiry()
        
        if days_left is None:
            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            logger.info("=" * 60)
            logger.info("–°–¢–ê–¢–£–°: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info("–î–ï–ô–°–¢–í–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            logger.info("=" * 60)
            success = manager.obtain_certificate()
            action = "—Å–æ–∑–¥–∞–Ω"
        elif days_left < renewal_days:
            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
            logger.info("=" * 60)
            logger.info(f"–°–¢–ê–¢–£–°: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π")
            logger.info(f"–î–ï–ô–°–¢–í–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–ø–æ—Ä–æ–≥: {renewal_days} –¥–Ω–µ–π)")
            logger.info("=" * 60)
            success = manager.renew_certificate()
            action = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            logger.info("=" * 60)
            logger.info(f"–°–¢–ê–¢–£–°: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ({days_left} –¥–Ω–µ–π)")
            logger.info("–î–ï–ô–°–¢–í–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            logger.info("=" * 60)
            manager.display_certificate_info()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å NPM –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            if config.get("npm_enabled", False):
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Nginx Proxy Manager...")
                npm_api = NginxProxyManagerAPI(
                    config["npm_host"],
                    config["npm_email"],
                    config["npm_password"],
                    logger
                )
                existing_cert = npm_api.login() and npm_api.find_certificate_by_domain(manager.domain)
                if existing_cert:
                    logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ NPM (ID: {existing_cert.get('id')})")
                else:
                    logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ NPM. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
                    if manager.sync_with_npm(npm_api):
                        logger.info("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å NPM")
            
            return 0
        
        # –ï—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        if success:
            logger.info("=" * 60)
            logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ {action}")
            logger.info("=" * 60)
            
            manager.display_certificate_info()
            reload_webserver(logger)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Nginx Proxy Manager
            if config.get("npm_enabled", False):
                logger.info("=" * 60)
                logger.info("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° NGINX PROXY MANAGER")
                logger.info("=" * 60)
                
                npm_api = NginxProxyManagerAPI(
                    config["npm_host"],
                    config["npm_email"],
                    config["npm_password"],
                    logger
                )
                if manager.sync_with_npm(npm_api):
                    logger.info(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ {action} –≤ Nginx Proxy Manager")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å NPM")
            
            logger.info("=" * 60)
            logger.info("–û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            logger.info("=" * 60)
            return 0
        else:
            logger.error("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return 1


if __name__ == "__main__":
    sys.exit(main())
